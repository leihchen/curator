-- This function generates a report based on a given frequency
-- This file should only be run once, in order to register the function

CREATE OR REPLACE FUNCTION generate_report (frequency_ text)
  returns TABLE (
          frequency text ,
          interval_start timestamp with time zone,
          interval_end timestamp with time zone,
          namespace text,
          "pods_avg_usage_cpu_core_total[millicore]" numeric,
          "pods_request_cpu_core_total[millicore]" numeric,
          "pods_limit_cpu_core_total[millicore]" numeric,
          "pods_avg_usage_memory_total[byte]" text,
          "pods_request_memory_total[byte]" text,
          "pods_limit_memory_total[byte]" text
)
  as $$
  declare
    interval_start_date timestamp with time zone;
    interval_end_date timestamp with time zone;
    total_seconds double precision;
  begin
    if frequency_ = 'day' then
      interval_start_date := date_trunc('day', current_date at time zone 'UTC') - interval '24 hours';
        interval_end_date := date_trunc('day', current_date at time zone 'UTC');
      total_seconds := 24 * 3600;
    end if;
    if frequency_ = 'week' then
        interval_start_date := date_trunc('day', current_date at time zone 'UTC') - interval '7 days';
        interval_end_date := date_trunc('day', current_date at time zone 'UTC');
        total_seconds := 7 * 24 * 3600;
    end if;
    if frequency_ = 'month' then
      interval_start_date := date_trunc('day', current_date at time zone 'UTC') - interval '1 month';
        interval_end_date := date_trunc('day', current_date at time zone 'UTC');
        total_seconds := 30 * 24 * 3600;
    end if;
    RETURN QUERY EXECUTE '
      INSERT INTO
        reports_human (
          frequency,
          interval_start,
          interval_end,
          namespace,
          "pods_avg_usage_cpu_core_total[millicore]", -- granularity = minute
          "pods_request_cpu_core_total[millicore]", -- granularity = minute
          "pods_limit_cpu_core_total[millicore]", -- granularity = minute
          "pods_avg_usage_memory_total[byte]", -- granularity = minute
          "pods_request_memory_total[byte]", -- granularity = minute
          "pods_limit_memory_total[byte]" -- granularity = minute
        )
      SELECT
      ' || quote_literal(frequency_) || ' as frequency,
      ' || quote_literal(interval_start_date) || '::timestamp with time zone  as interval_start,
      ' || quote_literal(interval_end_date) || '::timestamp with time zone  as interval_end,
        namespace,
        round(SUM(pod_avg_usage_cpu_core), 2),
        round(SUM(pod_request_cpu_core), 2),
        round(SUM(pod_limit_cpu_core), 2),
        pg_size_pretty(round(SUM(pod_avg_usage_memory), 0)),
        pg_size_pretty(round(SUM(pod_request_memory), 0 )),
        pg_size_pretty(round(SUM(pod_limit_memory), 0 ))
      FROM
        (SELECT
          namespace,
          (SUM(pod_usage_cpu_core_seconds) / ' || quote_literal(total_seconds) || ' * 1000 )::numeric      as pod_avg_usage_cpu_core,
          (MAX(pod_request_cpu_core_seconds) / 3600 * 1000 )::numeric   as pod_request_cpu_core,
          (MAX(pod_limit_cpu_core_seconds) / 3600 * 1000 )::numeric      as pod_limit_cpu_core,
          (SUM(pod_usage_memory_byte_seconds)   / ' || quote_literal(total_seconds) || ')::numeric as pod_avg_usage_memory,
          (MAX(pod_request_memory_byte_seconds) / 3600 )::numeric as pod_request_memory,
          (MAX(pod_limit_memory_byte_seconds)   / 3600 )::numeric as pod_limit_memory
        FROM logs_2
        WHERE interval_start >= ' || quote_literal(interval_start_date) || ' and interval_start < ' || quote_literal(interval_end_date) || '
        GROUP BY (namespace, pod, node))
      AS t
      GROUP BY namespace returning *';
end; $$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION generate_report_api (frequency_ text, reportingEnd timestamp with time zone default current_date - interval '1 day')
  returns TABLE (
	frequency text,
	interval_start timestamp with time zone,
    interval_end timestamp with time zone,
    namespace text,
	pod_usage_cpu_core_seconds double precision,
	pod_request_cpu_core_seconds double precision,
	pod_limit_cpu_core_seconds double precision,
	pod_usage_memory_byte_seconds double precision,
	pod_request_memory_byte_seconds double precision,
	pod_limit_memory_byte_seconds double precision,
	node_capacity_cpu_cores double precision,
	node_capacity_cpu_core_seconds double precision,
	node_capacity_memory_bytes double precision,
	node_capacity_memory_byte_seconds double precision
)
  as $$
  declare
    interval_start_date timestamp with time zone;
    interval_end_date timestamp with time zone := date_trunc('day', reportingEnd) + interval '1 day' - interval '1 second';
    valid_end_date timestamp with time zone := date_trunc('day', current_date) ;
  begin
  	if frequency_ = 'day' then
    	interval_start_date := date_trunc('day', reportingEnd);
    end if;
  	if frequency_ = 'week' then
        interval_start_date := date_trunc('day', reportingEnd) - interval '6 days';
    end if;
    if frequency_ = 'month' then
    	interval_start_date := date_trunc('day', reportingEnd) - interval '29 days';
    end if;
    if reportingEnd >= valid_end_date then
    RAISE EXCEPTION 'Querying future timestamp reportingEnd = (%). To get complete result, reportingEnd <= (%)', reportingEnd, valid_end_date;
    end if;
    RETURN QUERY EXECUTE '
      SELECT
        ' || quote_literal(frequency_) || ' as frequency,
        ' || quote_literal(interval_start_date) || '::timestamp with time zone  as interval_start,
        ' || quote_literal(interval_end_date) || '::timestamp with time zone  as interval_end,
        namespace,
        SUM(pod_usage_cpu_core_seconds)       as pod_usage_cpu_core_seconds,
        MAX(pod_request_cpu_core_seconds)     as pod_request_cpu_core_seconds,
        MAX(pod_limit_cpu_core_seconds)       as pod_limit_cpu_core_seconds,
        SUM(pod_usage_memory_byte_seconds)    as pod_usage_memory_byte_seconds,
        MAX(pod_request_memory_byte_seconds)  as pod_request_memory_byte_seconds,
        MAX(pod_limit_memory_byte_seconds)    as pod_limit_memory_byte_seconds,
        MAX(node_capacity_cpu_cores)          as node_capacity_cpu_cores,
        MAX(node_capacity_cpu_core_seconds)   as  node_capacity_cpu_core_seconds,
        MAX(node_capacity_memory_bytes)       as  node_capacity_memory_bytes,
        MAX(node_capacity_memory_byte_seconds)as  node_capacity_memory_byte_seconds
      FROM logs_2
      WHERE logs_2.interval_start >= ' || quote_literal(interval_start_date) || ' and logs_2.interval_end <= ' || quote_literal(interval_end_date) || '
      GROUP BY namespace';
end; $$ LANGUAGE plpgsql;
